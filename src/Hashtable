import java.security.Key;

/*
 * 线性探测哈希表
 */
//接口是开辟的数组，插入数据是时间
public class HashTableLin{
    private int[] hashArray;
    private int arraySize;

    public HashTableLin(int size){
        arraySize=size;
        hashArray=new int[arraySize];

    }
    //展示哈希表
    public void displayTable(){
        StringBuilder sb=new StringBuilder();
        sb.append("[");
        for(int i=0;i<arraySize;i++){
            if(i==arraySize-1){
                if(hashArray[i]!=0) {
                    sb.append(hashArray[i] + "");
                }else {
                    sb.append("** ");
                }
            }
            else {
                if(hashArray[i]!=0) {
                    sb.append(hashArray[i] + "");
                }else {
                    sb.append("** ");
                }
                sb.append(",");
            }
        }
        sb.append("]");
        System.out.print(sb.toString());
    }


    public int hashFunc(int key){
        return key-6;
    }

    /**
     * 插入元素
     */
    public String insert(int startTime,int endTime){
        int start,end;
        start=hashFunc(startTime);
        end=hashFunc(endTime);
        for (int i = start; i <=end ; i++) {
                hashArray[i]=1;
            }
        return "插入成功";

    }

    /**
     * 删除元素
     */
    public int  delete(int startTime,int endTime)//1成功删除
    {
        int flag;
        flag = 1;
        for (int i = startTime; i <= endTime; i++) {
            int hashVal = hashFunc(i);
            if (hashArray[hashVal] != 0)//位置被占用
            {
                flag = 0;
                hashArray[hashVal]=0;
            }
        }
        return flag;
    }

    /**
     * 查找元素
     */
    public int find(int startTime,int endTime)//这个时间段未被占用返回1
    {

        int flag;
        flag = 1;
        for (int i = startTime; i <= endTime; i++) {
            int hashVal = hashFunc(i);
            if (hashArray[hashVal] != 0)//位置被占用
                flag = 0;
        }
        return flag;
    }

}
